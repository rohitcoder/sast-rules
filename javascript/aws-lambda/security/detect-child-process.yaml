rules:
- id: detect-child-process__vszlm
  languages:
  - javascript
  - typescript
  message: Allowing spawning arbitrary programs or running shell processes with arbitrary
    arguments may end up in a command injection vulnerability. Try to avoid non-literal
    values for the command string. If it is not possible, then do not let running
    arbitrary commands, use a white list for inputs.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    technology:
    - javascript
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: exec($CMD,...)
      - pattern: execSync($CMD,...)
      - pattern: spawn($CMD,...)
      - pattern: spawnSync($CMD,...)
      - pattern: $CP.exec($CMD,...)
      - pattern: $CP.execSync($CMD,...)
      - pattern: $CP.spawn($CMD,...)
      - pattern: $CP.spawnSync($CMD,...)
    - pattern-either:
      - pattern-inside: 'require(''child_process'')

          ...

          '
      - pattern-inside: 'import ''child_process''

          ...

          '
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: "exports.handler = function ($EVENT, ...) {\n  ...\n}\n"
      - pattern-inside: 'function $FUNC ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
      - pattern-inside: '$FUNC = function ($EVENT, ...) {...}

          ...

          exports.handler = $FUNC

          '
  severity: ERROR
