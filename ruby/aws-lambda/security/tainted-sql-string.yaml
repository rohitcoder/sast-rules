rules:
- id: tainted-sql-string__yrryv
  languages:
  - ruby
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet
    subcategory:
    - vuln
    technology:
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '"...#{...}..."

            '
        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
      - patterns:
        - pattern-either:
          - pattern: Kernel::sprintf("$SQLSTR", ...)
          - pattern: '"$SQLSTR" + $EXPR

              '
          - pattern: '"$SQLSTR" % $EXPR

              '
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
    - pattern-not-inside: 'puts(...)

        '
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context)\n  ...\nend\n"
  severity: ERROR
