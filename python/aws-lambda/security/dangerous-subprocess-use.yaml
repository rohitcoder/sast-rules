rules:
- id: dangerous-subprocess-use__nwrrb
  languages:
  - python
  message: Detected subprocess function with argument tainted by `event` object. If
    this data can be controlled by a malicious actor, it may be an instance of command
    injection. Audit the use of this call to ensure it is not controllable by an external
    resource. You may consider using 'shlex.escape()'.
  metadata:
    asvs:
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/subprocess.html
    - https://docs.python.org/3/library/shlex.html
    subcategory:
    - vuln
    technology:
    - python
    - aws-lambda
  mode: taint
  pattern-sanitizers:
  - pattern: shlex.escape(...)
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: subprocess.$FUNC($CMD, ...)
      - pattern: subprocess.$FUNC([$CMD,...], ...)
      - pattern: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", $CMD, ...)
      - pattern: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", $CMD, ...],
          ...)
      - pattern: subprocess.$FUNC("=~/(python)/", $CMD, ...)
      - pattern: subprocess.$FUNC(["=~/(python)/",$CMD,...],...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
